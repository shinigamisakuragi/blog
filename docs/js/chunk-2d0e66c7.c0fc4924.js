(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e66c7"],{"994e":function(t,e,n){"use strict";n.r(e);var r=function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},u=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("p",[t._v("throttle 的概念理解起来更容易，就是固定函数执行的速率，即所谓的“节流”。")]),n("p",[t._v("正常情况下，`mousemove` 的监听函数可能会每 20ms（假设）执行一次，如果设置 200ms 的“节流”，那么它就会每 200ms 执行一次。")]),n("p",[t._v("比如在 1s 的时间段内，正常的监听函数可能会执行 50（1000/20） 次，“节流” 200ms 后则会执行 5（1000/200） 次。")]),n("pre",[t._v("        /**\n        *\n        * @param func {Function} 实际要执行的函数\n        * @param delay {Number} 执行间隔，单位是毫秒（ms）\n        *\n        * @return {Function} 返回一个“节流”函数\n        *\n        */\n        function throttle(func, delay){\n            let statTime = 0;\n\n            return function() {\n                let currTime = + new Date();\n\n                if (currTime - statTime > delay) {\n                    func.apply(this, arguments);\n                    statTime = currTime ;\n                }\n            }\n        }\n    ")]),n("p",[t._v("throttle设置一个阀值，在阀值内，把触发的事件合并成一次执行；当到达阀值，必定执行一次事件。")]),n("p",[t._v("可以访问这个 "),n("a",{attrs:{href:"http://demo.nimius.net/debounce_throttle/",target:"_blank"}},[t._v("http://demo.nimius.net/debounce_throttle/")]),t._v(" 来查看debounce、throttle和默认情况的事件监听效果。 ")])])}],a={name:"throttle"},c=a,o=n("2877"),i=Object(o["a"])(c,r,u,!1,null,"637efe7a",null);e["default"]=i.exports}}]);
//# sourceMappingURL=chunk-2d0e66c7.c0fc4924.js.map